{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a4876448",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing the Libraries\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0bd05177",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Company</th>\n",
       "      <th>Time</th>\n",
       "      <th>Financial Distress</th>\n",
       "      <th>x1</th>\n",
       "      <th>x2</th>\n",
       "      <th>x3</th>\n",
       "      <th>x4</th>\n",
       "      <th>x5</th>\n",
       "      <th>x6</th>\n",
       "      <th>x7</th>\n",
       "      <th>...</th>\n",
       "      <th>x74</th>\n",
       "      <th>x75</th>\n",
       "      <th>x76</th>\n",
       "      <th>x77</th>\n",
       "      <th>x78</th>\n",
       "      <th>x79</th>\n",
       "      <th>x80</th>\n",
       "      <th>x81</th>\n",
       "      <th>x82</th>\n",
       "      <th>x83</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.010636</td>\n",
       "      <td>1.2810</td>\n",
       "      <td>0.022934</td>\n",
       "      <td>0.87454</td>\n",
       "      <td>1.21640</td>\n",
       "      <td>0.060940</td>\n",
       "      <td>0.188270</td>\n",
       "      <td>0.52510</td>\n",
       "      <td>...</td>\n",
       "      <td>85.437</td>\n",
       "      <td>27.07</td>\n",
       "      <td>26.102</td>\n",
       "      <td>16.000</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.2</td>\n",
       "      <td>22</td>\n",
       "      <td>0.060390</td>\n",
       "      <td>30</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.455970</td>\n",
       "      <td>1.2700</td>\n",
       "      <td>0.006454</td>\n",
       "      <td>0.82067</td>\n",
       "      <td>1.00490</td>\n",
       "      <td>-0.014080</td>\n",
       "      <td>0.181040</td>\n",
       "      <td>0.62288</td>\n",
       "      <td>...</td>\n",
       "      <td>107.090</td>\n",
       "      <td>31.31</td>\n",
       "      <td>30.194</td>\n",
       "      <td>17.000</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>22</td>\n",
       "      <td>0.010636</td>\n",
       "      <td>31</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>-0.325390</td>\n",
       "      <td>1.0529</td>\n",
       "      <td>-0.059379</td>\n",
       "      <td>0.92242</td>\n",
       "      <td>0.72926</td>\n",
       "      <td>0.020476</td>\n",
       "      <td>0.044865</td>\n",
       "      <td>0.43292</td>\n",
       "      <td>...</td>\n",
       "      <td>120.870</td>\n",
       "      <td>36.07</td>\n",
       "      <td>35.273</td>\n",
       "      <td>17.000</td>\n",
       "      <td>15.0</td>\n",
       "      <td>-0.2</td>\n",
       "      <td>22</td>\n",
       "      <td>-0.455970</td>\n",
       "      <td>32</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>-0.566570</td>\n",
       "      <td>1.1131</td>\n",
       "      <td>-0.015229</td>\n",
       "      <td>0.85888</td>\n",
       "      <td>0.80974</td>\n",
       "      <td>0.076037</td>\n",
       "      <td>0.091033</td>\n",
       "      <td>0.67546</td>\n",
       "      <td>...</td>\n",
       "      <td>54.806</td>\n",
       "      <td>39.80</td>\n",
       "      <td>38.377</td>\n",
       "      <td>17.167</td>\n",
       "      <td>16.0</td>\n",
       "      <td>5.6</td>\n",
       "      <td>22</td>\n",
       "      <td>-0.325390</td>\n",
       "      <td>33</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.357300</td>\n",
       "      <td>1.0623</td>\n",
       "      <td>0.107020</td>\n",
       "      <td>0.81460</td>\n",
       "      <td>0.83593</td>\n",
       "      <td>0.199960</td>\n",
       "      <td>0.047800</td>\n",
       "      <td>0.74200</td>\n",
       "      <td>...</td>\n",
       "      <td>85.437</td>\n",
       "      <td>27.07</td>\n",
       "      <td>26.102</td>\n",
       "      <td>16.000</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.2</td>\n",
       "      <td>29</td>\n",
       "      <td>1.251000</td>\n",
       "      <td>7</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 86 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Company  Time  Financial Distress      x1        x2       x3       x4  \\\n",
       "0        1     1            0.010636  1.2810  0.022934  0.87454  1.21640   \n",
       "1        1     2           -0.455970  1.2700  0.006454  0.82067  1.00490   \n",
       "2        1     3           -0.325390  1.0529 -0.059379  0.92242  0.72926   \n",
       "3        1     4           -0.566570  1.1131 -0.015229  0.85888  0.80974   \n",
       "4        2     1            1.357300  1.0623  0.107020  0.81460  0.83593   \n",
       "\n",
       "         x5        x6       x7  ...      x74    x75     x76     x77   x78  \\\n",
       "0  0.060940  0.188270  0.52510  ...   85.437  27.07  26.102  16.000  16.0   \n",
       "1 -0.014080  0.181040  0.62288  ...  107.090  31.31  30.194  17.000  16.0   \n",
       "2  0.020476  0.044865  0.43292  ...  120.870  36.07  35.273  17.000  15.0   \n",
       "3  0.076037  0.091033  0.67546  ...   54.806  39.80  38.377  17.167  16.0   \n",
       "4  0.199960  0.047800  0.74200  ...   85.437  27.07  26.102  16.000  16.0   \n",
       "\n",
       "   x79  x80       x81  x82  x83  \n",
       "0  0.2   22  0.060390   30   49  \n",
       "1  0.4   22  0.010636   31   50  \n",
       "2 -0.2   22 -0.455970   32   51  \n",
       "3  5.6   22 -0.325390   33   52  \n",
       "4  0.2   29  1.251000    7   27  \n",
       "\n",
       "[5 rows x 86 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importing the dataset and extracting the independent and dependent variable\n",
    "companies=pd.read_csv('C:/Users/Asus/Downloads/archive (1)/Financial Distress.csv')\n",
    "x=companies.iloc[:,:-1].values\n",
    "y=companies.iloc[:,:4].values\n",
    "companies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e139f6ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R&amp;D Spend</th>\n",
       "      <th>Administration</th>\n",
       "      <th>Marketing Spend</th>\n",
       "      <th>State</th>\n",
       "      <th>Profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>165349.20</td>\n",
       "      <td>136897.80</td>\n",
       "      <td>471784.10</td>\n",
       "      <td>New York</td>\n",
       "      <td>192261.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>162597.70</td>\n",
       "      <td>151377.59</td>\n",
       "      <td>443898.53</td>\n",
       "      <td>California</td>\n",
       "      <td>191792.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>153441.51</td>\n",
       "      <td>101145.55</td>\n",
       "      <td>407934.54</td>\n",
       "      <td>Florida</td>\n",
       "      <td>191050.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>144372.41</td>\n",
       "      <td>118671.85</td>\n",
       "      <td>383199.62</td>\n",
       "      <td>New York</td>\n",
       "      <td>182901.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>142107.34</td>\n",
       "      <td>91391.77</td>\n",
       "      <td>366168.42</td>\n",
       "      <td>Florida</td>\n",
       "      <td>166187.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   R&D Spend  Administration  Marketing Spend       State     Profit\n",
       "0  165349.20       136897.80        471784.10    New York  192261.83\n",
       "1  162597.70       151377.59        443898.53  California  191792.06\n",
       "2  153441.51       101145.55        407934.54     Florida  191050.39\n",
       "3  144372.41       118671.85        383199.62    New York  182901.99\n",
       "4  142107.34        91391.77        366168.42     Florida  166187.94"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importing the dataset and extracting the independent and dependent variable\n",
    "companies=pd.read_csv('C:/Users/Asus/Downloads/important file/50_Startups.csv')\n",
    "x=companies.iloc[:,:-1].values\n",
    "y=companies.iloc[:,:4].values\n",
    "companies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6d18d0b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#data visualisation \n",
    "# Buliding the corrrelation matrix\n",
    "sns.heatmap(companies.corr())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "eccc9dd7",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "__init__() got an unexpected keyword argument 'categorical_features'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_8584/2523187267.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlabelencoder\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0monehotencoder\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mOneHotEncoder\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcategorical_features\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0monehotencoder\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtoarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36minner_f\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     62\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 63\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     64\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     65\u001b[0m             \u001b[1;31m# extra_args > 0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: __init__() got an unexpected keyword argument 'categorical_features'"
     ]
    }
   ],
   "source": [
    "#Encoding Categorial data\n",
    "from sklearn.preprocessing import LabelEncoder,OneHotEncoder\n",
    "labelencoder=LabelEncoder()\n",
    "x[:,3]=labelencoder.fit_transform(x[:,3])\n",
    "\n",
    "onehotencoder = OneHotEncoder(categorical_features=[3])\n",
    "x=onehotencoder.fit_transform(x).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "62b9c81a",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=x[:,1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "b5224931",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "too many values to unpack (expected 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_8584/187964449.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mx_test\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtrain_test_split\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mtest_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m: too many values to unpack (expected 3)"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train=train_test_split(x,y,test_size=0.2,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15bff267",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efcbc783",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c38e49f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e9791e55",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'X' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_8584/4002316542.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcompose\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mColumnTransformer\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mct\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mColumnTransformer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Geography\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mOneHotEncoder\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mremainder\u001b[0m\u001b[1;33m=\u001b[0m \u001b[1;34m'passthrough'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mct\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mlabelencoder_X2\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mLabelEncoder\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m4\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlabelencoder_X2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m4\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'X' is not defined"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "885dbd54",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=companies"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9118c33",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis\n",
    "Check Data Accountability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b095d990",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50 entries, 0 to 49\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   R&D Spend        50 non-null     float64\n",
      " 1   Administration   50 non-null     float64\n",
      " 2   Marketing Spend  50 non-null     float64\n",
      " 3   State            50 non-null     object \n",
      " 4   Profit           50 non-null     float64\n",
      "dtypes: float64(4), object(1)\n",
      "memory usage: 2.1+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "78222cac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R&amp;D Spend</th>\n",
       "      <th>Administration</th>\n",
       "      <th>Marketing Spend</th>\n",
       "      <th>Profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>73721.615600</td>\n",
       "      <td>121344.639600</td>\n",
       "      <td>211025.097800</td>\n",
       "      <td>112012.639200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>45902.256482</td>\n",
       "      <td>28017.802755</td>\n",
       "      <td>122290.310726</td>\n",
       "      <td>40306.180338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>51283.140000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14681.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>39936.370000</td>\n",
       "      <td>103730.875000</td>\n",
       "      <td>129300.132500</td>\n",
       "      <td>90138.902500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>73051.080000</td>\n",
       "      <td>122699.795000</td>\n",
       "      <td>212716.240000</td>\n",
       "      <td>107978.190000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>101602.800000</td>\n",
       "      <td>144842.180000</td>\n",
       "      <td>299469.085000</td>\n",
       "      <td>139765.977500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>165349.200000</td>\n",
       "      <td>182645.560000</td>\n",
       "      <td>471784.100000</td>\n",
       "      <td>192261.830000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           R&D Spend  Administration  Marketing Spend         Profit\n",
       "count      50.000000       50.000000        50.000000      50.000000\n",
       "mean    73721.615600   121344.639600    211025.097800  112012.639200\n",
       "std     45902.256482    28017.802755    122290.310726   40306.180338\n",
       "min         0.000000    51283.140000         0.000000   14681.400000\n",
       "25%     39936.370000   103730.875000    129300.132500   90138.902500\n",
       "50%     73051.080000   122699.795000    212716.240000  107978.190000\n",
       "75%    101602.800000   144842.180000    299469.085000  139765.977500\n",
       "max    165349.200000   182645.560000    471784.100000  192261.830000"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "430f295d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R&D Spend\n",
      "False    50\n",
      "Name: R&D Spend, dtype: int64\n",
      "\n",
      "Administration\n",
      "False    50\n",
      "Name: Administration, dtype: int64\n",
      "\n",
      "Marketing Spend\n",
      "False    50\n",
      "Name: Marketing Spend, dtype: int64\n",
      "\n",
      "State\n",
      "False    50\n",
      "Name: State, dtype: int64\n",
      "\n",
      "Profit\n",
      "False    50\n",
      "Name: Profit, dtype: int64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "missing_data = data.isnull()\n",
    "\n",
    "for column in missing_data.columns.values.tolist():\n",
    " print (column)\n",
    " print (missing_data[column].value_counts())\n",
    " print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "dbf98657",
   "metadata": {},
   "outputs": [],
   "source": [
    "import chardet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "a24cb3b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 803.75x720 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Numerical columns\n",
    "sns.pairplot(data, kind=\"reg\", diag_kind=\"\",  hue=\"State\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9160d1cf",
   "metadata": {},
   "source": [
    "# Boxplot of each variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "fd74efe1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "R&D Spend             AxesSubplot(0.125,0.536818;0.352273x0.343182)\n",
       "Administration     AxesSubplot(0.547727,0.536818;0.352273x0.343182)\n",
       "Marketing Spend          AxesSubplot(0.125,0.125;0.352273x0.343182)\n",
       "Profit                AxesSubplot(0.547727,0.125;0.352273x0.343182)\n",
       "dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x504 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.plot(kind='box',subplots=True,layout=(2,2),figsize=(12,7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "770555c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Asus\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Profit'>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data[\"Profit\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d6bcb7b",
   "metadata": {},
   "source": [
    "# Correlation of each variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "336e5b42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R&amp;D Spend</th>\n",
       "      <th>Administration</th>\n",
       "      <th>Marketing Spend</th>\n",
       "      <th>Profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>R&amp;D Spend</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.241955</td>\n",
       "      <td>0.724248</td>\n",
       "      <td>0.972900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Administration</th>\n",
       "      <td>0.241955</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.032154</td>\n",
       "      <td>0.200717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Marketing Spend</th>\n",
       "      <td>0.724248</td>\n",
       "      <td>-0.032154</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.747766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Profit</th>\n",
       "      <td>0.972900</td>\n",
       "      <td>0.200717</td>\n",
       "      <td>0.747766</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 R&D Spend  Administration  Marketing Spend    Profit\n",
       "R&D Spend         1.000000        0.241955         0.724248  0.972900\n",
       "Administration    0.241955        1.000000        -0.032154  0.200717\n",
       "Marketing Spend   0.724248       -0.032154         1.000000  0.747766\n",
       "Profit            0.972900        0.200717         0.747766  1.000000"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0fdaeac6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corrmat = data.corr(method='spearman')\n",
    "f, ax = plt.subplots(figsize=(12, 10))\n",
    "\n",
    "matrix = np.triu(corrmat)\n",
    "sns.heatmap(corrmat, ax=ax, cmap=\"YlGnBu\", linewidths=0.1, mask=matrix, annot = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1ba4ccb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['R&D Spend', 'Administration', 'Marketing Spend', 'State', 'Profit'], dtype='object')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fed047c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "New York      17\n",
       "California    17\n",
       "Florida       16\n",
       "Name: State, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.State.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5016f7f7",
   "metadata": {},
   "source": [
    "# Check Multicollinearity between Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "5c6bd56e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           feature       VIF\n",
      "0        R&D Spend  8.384571\n",
      "1   Administration  4.026406\n",
      "2  Marketing Spend  7.593984\n"
     ]
    }
   ],
   "source": [
    " from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "  \n",
    "# the independent variables set\n",
    "X = data[['R&D Spend', 'Administration', 'Marketing Spend']]\n",
    "  \n",
    "# VIF dataframe\n",
    "vif_data = pd.DataFrame()\n",
    "vif_data[\"feature\"] = X.columns\n",
    "  \n",
    "# calculating VIF for each feature\n",
    "vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i)\n",
    "                          for i in range(len(X.columns))]\n",
    "  \n",
    "print(vif_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2103a780",
   "metadata": {},
   "source": [
    "# Check target distribution\n",
    "VIF starts at 1 and has no upper limit\n",
    "\n",
    "VIF = 1, no correlation between the independent variable and the other variables\n",
    "\n",
    "VIF exceeding 5 or 10 indicates high multicollinearity between this independent variable and the others.\n",
    "\n",
    "With this terms, feature R&D Spend and Marketing Spend have high multicollinearity, or correlated each other ~ which this could lead high variance and error rate in model.\n",
    "\n",
    "Then we will be using more robust model that could combat this issue: Lasso, Ridge, ElasticNet later on, compares to Linear Regression.\n",
    "\n",
    "#Check target distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "cd156f67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.Profit.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b422c9c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NormaltestResult(statistic=0.017927081855183012, pvalue=0.9910765118444982)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats.mstats import normaltest # D'Agostino K^2 Test\n",
    "normaltest(data.Profit.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbb39ebb",
   "metadata": {},
   "source": [
    "# Data Wrangling\n",
    "Label Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "67997865",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Asus\\AppData\\Local\\Temp/ipykernel_8584/2423080043.py:2: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. \n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  one_hot_encode_cols = data.dtypes[data.dtypes == np.object]  # filtering by string categoricals\n"
     ]
    }
   ],
   "source": [
    "# Get a Pd.Series consisting of all the string categoricals\n",
    "one_hot_encode_cols = data.dtypes[data.dtypes == np.object]  # filtering by string categoricals\n",
    "one_hot_encode_cols = one_hot_encode_cols.index.tolist()  # list of categorical fields\n",
    "\n",
    "# Here we see another way of one-hot-encoding:\n",
    "# Encode these columns as categoricals so one hot encoding works on split data (if desired)\n",
    "for col in one_hot_encode_cols:\n",
    "    data[col] = pd.Categorical(data[col])\n",
    "\n",
    "# Do the one hot encoding\n",
    "data_ = pd.get_dummies(data, columns=one_hot_encode_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4af281ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['State']"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one_hot_encode_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a77673e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R&amp;D Spend</th>\n",
       "      <th>Administration</th>\n",
       "      <th>Marketing Spend</th>\n",
       "      <th>Profit</th>\n",
       "      <th>State_California</th>\n",
       "      <th>State_Florida</th>\n",
       "      <th>State_New York</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>165349.20</td>\n",
       "      <td>136897.80</td>\n",
       "      <td>471784.10</td>\n",
       "      <td>192261.83</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>162597.70</td>\n",
       "      <td>151377.59</td>\n",
       "      <td>443898.53</td>\n",
       "      <td>191792.06</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>153441.51</td>\n",
       "      <td>101145.55</td>\n",
       "      <td>407934.54</td>\n",
       "      <td>191050.39</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>144372.41</td>\n",
       "      <td>118671.85</td>\n",
       "      <td>383199.62</td>\n",
       "      <td>182901.99</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>142107.34</td>\n",
       "      <td>91391.77</td>\n",
       "      <td>366168.42</td>\n",
       "      <td>166187.94</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   R&D Spend  Administration  Marketing Spend     Profit  State_California  \\\n",
       "0  165349.20       136897.80        471784.10  192261.83                 0   \n",
       "1  162597.70       151377.59        443898.53  191792.06                 1   \n",
       "2  153441.51       101145.55        407934.54  191050.39                 0   \n",
       "3  144372.41       118671.85        383199.62  182901.99                 0   \n",
       "4  142107.34        91391.77        366168.42  166187.94                 0   \n",
       "\n",
       "   State_Florida  State_New York  \n",
       "0              0               1  \n",
       "1              0               0  \n",
       "2              1               0  \n",
       "3              0               1  \n",
       "4              1               0  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf4c9bf4",
   "metadata": {},
   "source": [
    "# Remove Outlier (Profit has outlier value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "2dc68e1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Asus\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Profit'>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data_[\"Profit\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8b81eed2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lower Bounds :  15698.290000000023 Quartile 1 :  90138.9025 Median: 107978.19 Quartile 3: 139765.97749999998 Upper Bounds 214206.58999999997\n"
     ]
    }
   ],
   "source": [
    "#calculate interquartile range\n",
    "\n",
    "Q1 = data['Profit'][data['Profit'] != 0].quantile(0.25)\n",
    "Q2 = data['Profit'][data['Profit'] != 0].quantile(0.50)\n",
    "Q3 = data['Profit'][data['Profit'] != 0].quantile(0.75)\n",
    "IQR = Q3-Q1\n",
    "\n",
    "#calculate min/max limits tp be considered as outlier\n",
    "\n",
    "lower_bounds = Q1 - 1.5*(IQR)\n",
    "upper_bounds = Q3 + 1.5*(IQR)\n",
    "\n",
    "print ('Lower Bounds : ',lower_bounds,\n",
    "       'Quartile 1 : ',Q1, \n",
    "       'Median:' , Q2, \n",
    "       'Quartile 3:', Q3, \n",
    "       'Upper Bounds',upper_bounds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "1a445c6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R&amp;D Spend</th>\n",
       "      <th>Administration</th>\n",
       "      <th>Marketing Spend</th>\n",
       "      <th>Profit</th>\n",
       "      <th>State_California</th>\n",
       "      <th>State_Florida</th>\n",
       "      <th>State_New York</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>165349.20</td>\n",
       "      <td>136897.80</td>\n",
       "      <td>471784.10</td>\n",
       "      <td>192261.83</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>162597.70</td>\n",
       "      <td>151377.59</td>\n",
       "      <td>443898.53</td>\n",
       "      <td>191792.06</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>153441.51</td>\n",
       "      <td>101145.55</td>\n",
       "      <td>407934.54</td>\n",
       "      <td>191050.39</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>144372.41</td>\n",
       "      <td>118671.85</td>\n",
       "      <td>383199.62</td>\n",
       "      <td>182901.99</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>142107.34</td>\n",
       "      <td>91391.77</td>\n",
       "      <td>366168.42</td>\n",
       "      <td>166187.94</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   R&D Spend  Administration  Marketing Spend     Profit  State_California  \\\n",
       "0  165349.20       136897.80        471784.10  192261.83                 0   \n",
       "1  162597.70       151377.59        443898.53  191792.06                 1   \n",
       "2  153441.51       101145.55        407934.54  191050.39                 0   \n",
       "3  144372.41       118671.85        383199.62  182901.99                 0   \n",
       "4  142107.34        91391.77        366168.42  166187.94                 0   \n",
       "\n",
       "   State_Florida  State_New York  \n",
       "0              0               1  \n",
       "1              0               0  \n",
       "2              1               0  \n",
       "3              0               1  \n",
       "4              1               0  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#identify points of seed outlier\n",
    "profit_without_outlier= data_[(data_['Profit'] > lower_bounds)]\n",
    "\n",
    "profit_without_outlier = profit_without_outlier.rename(columns={0: 'seed'})\n",
    "data_1 = profit_without_outlier.copy()\n",
    "\n",
    "data_1.head() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ceb3b13b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Asus\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Profit'>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXMAAAEGCAYAAACXVXXgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAMgElEQVR4nO3de4yl9V3H8c+PHVsWai10geJSXXGDpsZI27XeqAHES0mDMTHRpibUS4yXrAtGTQmJ0f5XMKZ0jbZErWihltaqSdMG1KDyj+Buy1VAhktbViyLJLQWrIX+/ON51p0Z9jKzu3OeM9++XslknnnO5fnOmX3ee85zzpxpvfcAsLGdNPUAABw/MQcoQMwBChBzgALEHKCAhbWcecuWLX3btm3rNApATXv37n26937Gem5jTTHftm1b9uzZs16zAJTUWvvMem/DYRaAAsQcoAAxByhAzAEKEHOAAsQcoAAxByhAzAEKEHOAAsQcoAAxByhAzAEKEHOAAsQcoAAxByhAzAEKEHOAAsQcoAAxByhgTX8DlPp2796dxcXFqcdIkuzbty9JsnXr1oknmc727duzc+fOqcdgAxBzlllcXMxd9z2QF085fepRsum5Z5Mk//nlr81/ppuee2bqEdhAvjb3Eo7oxVNOz/PffunUY2Tzg59IkrmYZQoHvn9YDcfMAQoQc4ACxBygADEHKEDMAQoQc4ACxBygADEHKEDMAQoQc4ACxBygADEHKEDMAQoQc4ACxBygADEHKEDMAQoQc4ACxBygADEHKEDMAQoQc4ACxBygADEHKEDMAQoQc4ACxBygADEHKEDMAQoQc4ACxBygADEHKEDMAQoQc4ACxBygADEHKEDMAQoQc4ACxBygADEHKEDMAQqYScx3796d3bt3z2JTACfURunXwiw2sri4OIvNAJxwG6VfDrMAFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFLAwi43s27cvzz//fHbt2jWLzXEcFhcXc9L/9qnHIMlJ//OFLC5+0X4zscXFxWzevHnqMY7qqPfMW2u/2Frb01rbs3///lnMBMAaHfWeee/9+iTXJ8mOHTuO6S7b1q1bkyTXXXfdsVycGdq1a1f2Pvr5qccgyVdPfmW2n3uW/WZiG+WRkWPmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABYg5QgJgDFCDmAAWIOUABC7PYyPbt22exGYATbqP0ayYx37lz5yw2A3DCbZR+OcwCUICYAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAQtTD8D82fTcM9n84CemHiObnvuvJJmLWaaw6blnkpw19RhsEGLOMtu3b596hP+3b98LSZKtW79Wg3bWXP08mG9izjI7d+6cegTgGDhmDlCAmAMUIOYABYg5QAFiDlCAmAMUIOYABYg5QAFiDlCAmAMUIOYABYg5QAFiDlCAmAMUIOYABYg5QAFiDlCAmAMUIOYABYg5QAGt9776M7e2P8ln1mmWLUmeXqfrPl5mOzZmOzZmW7t5nSsZZju1937Gem5kTTFfT621Pb33HVPPcShmOzZmOzZmW7t5nSuZ3WwOswAUIOYABcxTzK+feoAjMNuxMduxMdvazetcyYxmm5tj5gAcu3m6Zw7AMRJzgAp67yf8I8mmJJ9O8vHx69OT/F2Sh8fPpy0571VJFpM8lORHl6x/Y5J7x9Pem4OHhF6e5MPj+juSbFvDXK9K8tEkDyZ5IMn3zdFsVya5P8l9ST6U5OSpZkvyp0meSnLfknUzmSXJ5eM2Hk5y+Spnu3b8md6T5K+TvGpeZlty2m8k6Um2zNNsSXaO278/yTWznu0wP8/zk/xLkruS7Enypolus9cmuS1DK+5Psmue9oWXzLva2KzlI8mvJ7kpB2N+TZJ3jsvvTPLucfl1Se4ev6FvSfJIkk3jaXdmiG1L8skkbxnX/0qS943LP53kw2uY64YkvzAuvyxD3CefLcnWJI8l2Tx+fXOSd0w1W5IfTPKGLN/B1n2WDDvJo+Pn08bl01Yx248kWRiX3z1Psy2Jwi0ZfuFuy7zMluSiJH+f5OXj12fOerbDzHXrkuu9NMk/TnSbnZ3kDePy1yf593GGudgXXrLfnoh4r7gBzknyD0kuzsGYP5Tk7CU30EPj8lVJrlpy2VvGb/jsJA8uWf+2JO9fep5xeSHDb321Vcz1ygzBbCvWz8NsW5N8bvzBLST5eIZATTZbkm1ZvoOt+yxLzzOe9v4kbzvabCtO+4kkN87TbBkeDX5XksdzMOaTz5bhTsMlhzjfTGc7xFy3JPmpJdu4aarbbMWcf5vkhzNH+8LSj/U4Zv6eJL+V5KtL1p3Ve38yScbPZ47rD0TsgCfGdVvH5ZXrl12m9/5CkmeTvHoVc52bZH+SD7TWPt1a++PW2qnzMFvvfV+S30vy2SRPJnm2937rPMy2xCxmOdx1rcXPZbjnMxeztdYuS7Kv9373ipMmny3JeUne3Fq7o7X2T621756T2a5Icm1r7XMZ9ourpp6rtbYtyeszHAqZy33hhMa8tfbWJE/13veu9iKHWNePsP5IlzmahQwP5/6o9/76JF/K8BBp8tlaa6cl+fEMD82+McmprbWfmYfZVuFEznJcM7bWrk7yQpIb52G21topSa5O8tuHOnnK2UYLGR7Cf2+S30xyc2utzcFsv5zkyt77azM8l/Qnx7GN456rtfaKJH+V5Ire+xeOMPekt9uJvmf+A0kua609nuQvk1zcWvtgks+31s5OkvHzU+P5n8hwPPGAc5L8x7j+nEOsX3aZ1tpCkm9I8swqZnsiyRO99zvGrz+aIe7zMNslSR7rve/vvX8lyceSfP+czHbALGY53HUdVWvt8iRvTfL2Pj4unYPZvjXDf9B3j/vEOUk+1Vp7zRzMduD6PtYHd2Z4NL1lDma7PMM+kCQfSfKmlduY1Vytta/LEPIbe+8HZprPfeFIx2CO5yPJhTl4zPzaLH/C4Jpx+Tuy/AmDR3PwCYN/zXCP4cATBpeO6381y58wuHkNM92e5NvG5d8Z55p8tiTfk+HZ8lPG67whw6sMJpstLz2Oue6zZHjO4LEM9xZPG5dPX8VsP5bk35KcseJ8k8+24rTHc/CY+eSzJfmlJO8al8/L8LC+zXq2Q8z1QJILx+UfSrJ3ittsvK4/T/KeFevnZl9YNtdqQ7jWjyyP+aszPCn68Pj59CXnuzrDs74PZXyGd1y/I8PL9B5J8gc5+FKekzP8b72Y4Rnic9cw0/kZXup0T5K/GW+keZntdzO8vO6+JH8x/oOYZLYML418MslXMtxD+PlZzZLhmPfi+PGzq5xtMUOI7ho/3jcvs604/fEsf2ni1Lfby5J8cNzWp5JcPOvZDjPXBUn2ZgjjHUneONFtdkGGQxv35OC/rUszJ/vCyg+/zg9QgN8ABShAzAEKEHOAAsQcoAAxByhAzJlLrbUXW2t3tdbua619ZPxtyrVc/kOttXtaa1e21t7VWrtkXH/FWq8LNgIvTWQutdb+u/f+inH5xgy/OPL7S07f1Ht/8TCXfU2SO3rv33yI0x5PsqP3/vT6TA7TcM+cjeD2JNtbaxe21m5rrd2U5N7W2smttQ+01u4d3zztovH8tyY5c7xn/+bW2p+11n6ytfZrGd775rbW2m1TfTOwHsScuTa+X8VbMryxfzK8T8fVvffXZfhV6PTevzPDW4be0Fo7OcllSR7pvZ/fe7/9wHX13t+b4f0tLuq9XxQoRMyZV5tba3dlePuFz+bgO+fd2Xt/bFy+IMNbH6T3/mCGP/5w3oznhLmwMPUAcBjP997PX7pieHfWfGnpqlkOBPPMPXM2sn9O8vYkaa2dl+SbMrzB0ZF8McOfAINSxJyN7A+TbGqt3Zvhj+K+o/f+5aNc5vokn/QEKNV4aSJAAe6ZAxQg5gAFiDlAAWIOUICYAxQg5gAFiDlAAf8HK2QR6Yy5moEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data_1[\"Profit\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f93b954e",
   "metadata": {},
   "source": [
    "# Check Skewness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "20acbfa9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Split Train and Split Test\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train, test = train_test_split(data_1, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "10df220a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['R&D Spend', 'Administration', 'Marketing Spend', 'Profit'], dtype='object')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a list of float colums to check for skewing\n",
    "\n",
    "mask = data_1.apply(lambda x:x.nunique()>2)\n",
    "num_cols = data_1.columns[mask]\n",
    "num_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5ee1dad0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "R&D Spend          0.296813\n",
       "Administration    -0.105979\n",
       "Marketing Spend    0.107230\n",
       "Profit             0.355942\n",
       "dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[num_cols].skew()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "bf927cb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [0]\n",
       "Index: []"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skew_limit = 0.75\n",
    "skew_vals = train[num_cols].skew()\n",
    "\n",
    "skew_cols = (skew_vals[skew_vals>skew_limit]\n",
    "             .sort_values(ascending=False)\n",
    "             .to_frame()\n",
    "             .rename(columns={'0':'Skew'}))\n",
    "skew_cols"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10f5e6b7",
   "metadata": {},
   "source": [
    "# Machine Learning : Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66c4781e",
   "metadata": {},
   "source": [
    "# Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "84258fd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_cols = [x for x in train.columns if x != 'Profit']\n",
    "X_train = train[feature_cols]\n",
    "y_train = train['Profit']\n",
    "\n",
    "X_test  = test[feature_cols]\n",
    "y_test  = test['Profit']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8c1f5f30",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "def rmse(ytrue, ypredicted):\n",
    "    return np.sqrt(mean_squared_error(ytrue, ypredicted))\n",
    "\n",
    "def r2(ytrue, ypredicted):\n",
    "    return r2_score(ytrue,ypredicted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "830d1b43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE Linear Regression:  8490.359121303534\n",
      "R2 Score Linear Regression : 0.9484326566905075\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "linearRegression = LinearRegression().fit(X_train, y_train)\n",
    "\n",
    "linearRegression_rmse = rmse(y_test, linearRegression.predict(X_test))\n",
    "linearRegression_r2 = r2(y_test, linearRegression.predict(X_test))\n",
    "\n",
    "print('RMSE Linear Regression: ', linearRegression_rmse)\n",
    "print('R2 Score Linear Regression :' ,linearRegression_r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "e154748f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=(6,6))\n",
    "ax = plt.axes()\n",
    "\n",
    "ax.plot(y_test, linearRegression.predict(X_test), \n",
    "         marker='o', ls='', ms=3.0)\n",
    "\n",
    "lim = (0, y_test.max())\n",
    "\n",
    "ax.set(xlabel='Actual Profit', \n",
    "       ylabel='Predicted Profit', \n",
    "       xlim=lim,\n",
    "       ylim=lim,\n",
    "       title='Linear Regression Results');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "1ec2165e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "51879.87134074226"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linearRegression.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4aa064d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.63869188e-01, -3.44251655e-02,  3.64609266e-02,  1.86318208e+03,\n",
       "        9.80837003e+01, -1.96126578e+03])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linearRegression.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "6d85c3ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Predictor</th>\n",
       "      <th>Coefficient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>R&amp;D Spend</td>\n",
       "      <td>0.763869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Administration</td>\n",
       "      <td>-0.034425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Marketing Spend</td>\n",
       "      <td>0.036461</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Predictor  Coefficient\n",
       "0        R&D Spend     0.763869\n",
       "1   Administration    -0.034425\n",
       "2  Marketing Spend     0.036461"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(zip(X.columns, linearRegression.coef_))\n",
    "df.columns = ['Predictor', 'Coefficient']\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be9781a5",
   "metadata": {},
   "source": [
    "#  Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "a16f77cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lambda Lasso : 0.0005\n",
      "RMSE Lasso: 8490.358661971437\n",
      "R2 Score:  0.9484326622701383\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Asus\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:526: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 39952691.77782965, tolerance: 3161924.7619271697\n",
      "  model = cd_fast.enet_coordinate_descent_gram(\n",
      "C:\\Users\\Asus\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:526: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 39952676.81537461, tolerance: 3161924.7619271697\n",
      "  model = cd_fast.enet_coordinate_descent_gram(\n",
      "C:\\Users\\Asus\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:526: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 39953127.499854565, tolerance: 3161924.7619271697\n",
      "  model = cd_fast.enet_coordinate_descent_gram(\n",
      "C:\\Users\\Asus\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:526: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 39948568.62033296, tolerance: 3161924.7619271697\n",
      "  model = cd_fast.enet_coordinate_descent_gram(\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LassoCV\n",
    "\n",
    "alphas2 = np.array([1e-5, 5e-5, 0.0001, 0.0005])\n",
    "\n",
    "lassoCV = LassoCV(alphas=alphas2,\n",
    "                  max_iter=5e4,\n",
    "                  cv=3).fit(X_train, y_train)\n",
    "\n",
    "lassoCV_rmse = rmse(y_test, lassoCV.predict(X_test))\n",
    "lassoCV_r2 = r2(y_test, lassoCV.predict(X_test))\n",
    "\n",
    "print('Lambda Lasso :',lassoCV.alpha_) \n",
    "print('RMSE Lasso:', lassoCV_rmse)\n",
    "print('R2 Score: ', lassoCV_r2) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "fc2225d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Of 6 coefficients, 6 are non-zero with Lasso.\n"
     ]
    }
   ],
   "source": [
    "print('Of {} coefficients, {} are non-zero with Lasso.'.format(len(lassoCV.coef_), \n",
    "                                                               len(lassoCV.coef_.nonzero()[0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e4dc35b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.63869184e-01, -3.44251586e-02,  3.64609289e-02,  3.05548022e+03,\n",
       "        1.29038134e+03, -7.68965409e+02])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lassoCV.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "e8643e0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50687.571754669276"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lassoCV.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "65e8abca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Predictor</th>\n",
       "      <th>Coefficient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>R&amp;D Spend</td>\n",
       "      <td>0.763869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Administration</td>\n",
       "      <td>-0.034425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Marketing Spend</td>\n",
       "      <td>0.036461</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Predictor  Coefficient\n",
       "0        R&D Spend     0.763869\n",
       "1   Administration    -0.034425\n",
       "2  Marketing Spend     0.036461"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = pd.DataFrame(zip(X.columns, lassoCV.coef_))\n",
    "df1.columns = ['Predictor', 'Coefficient']\n",
    "df1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f0bebef",
   "metadata": {},
   "source": [
    "# ElasticNet Regression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "f6e4fc45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lambda RidgeCV : 80.0\n",
      "RMSE RidgeCV: 8170.933126433551\n",
      "R2 Score RidgeCV:  0.9522398206055459\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import RidgeCV\n",
    "\n",
    "\n",
    "alphas = [0.005, 0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 80]\n",
    "\n",
    "ridgeCV = RidgeCV(alphas=alphas, \n",
    "                  cv=4).fit(X_train, y_train)\n",
    "\n",
    "ridgeCV_rmse = rmse(y_test, ridgeCV.predict(X_test))\n",
    "ridgeCV_r2 = r2(y_test, ridgeCV.predict(X_test))\n",
    "\n",
    "\n",
    "print('Lambda RidgeCV :',ridgeCV.alpha_) \n",
    "print('RMSE RidgeCV:', ridgeCV_rmse)\n",
    "print('R2 Score RidgeCV: ', ridgeCV_r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "58ae0280",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Of 6 coefficients, 6 are non-zero with Ridge.\n"
     ]
    }
   ],
   "source": [
    "print('Of {} coefficients, {} are non-zero with Ridge.'.format(len(ridgeCV.coef_), \n",
    "                                                               len(ridgeCV.coef_.nonzero()[0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d19447b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.66009808e-01, -3.53016423e-02,  3.65264303e-02,  2.16981154e+02,\n",
       "        6.58955581e+00, -2.23570710e+02])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridgeCV.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "d21a1c09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "51860.13124385099"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridgeCV.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "43242d47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Predictor</th>\n",
       "      <th>Coefficient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Administration</td>\n",
       "      <td>-0.035302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Marketing Spend</td>\n",
       "      <td>0.036526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>R&amp;D Spend</td>\n",
       "      <td>0.766010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Predictor  Coefficient\n",
       "1   Administration    -0.035302\n",
       "2  Marketing Spend     0.036526\n",
       "0        R&D Spend     0.766010"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = pd.DataFrame(zip(X.columns, ridgeCV.coef_)).sort_values(by=1)\n",
    "\n",
    "df2.columns = ['Predictor', 'Coefficient']\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42033539",
   "metadata": {},
   "source": [
    "# Comparison Result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "0ecc1f97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lambda ElasticNetCV : 0.0005\n",
      "l1 Ratios:  0.1\n",
      "RMSE ElasticNetCV: 8489.591438933392\n",
      "R2 Score ElasticNetCV:  0.9484419815141248\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import ElasticNetCV\n",
    "\n",
    "l1_ratios = np.linspace(0.1, 0.9, 9) #since we want balance of L1 and L2. \n",
    "#See l1_ratios https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html\n",
    "\n",
    "elasticNetCV = ElasticNetCV(alphas=alphas2, \n",
    "                            l1_ratio=l1_ratios,\n",
    "                            max_iter=1000000).fit(X_train, y_train) #1e4\n",
    "elasticNetCV_rmse = rmse(y_test, elasticNetCV.predict(X_test))\n",
    "elasticNetCV_r2 = r2(y_test, elasticNetCV.predict(X_test))\n",
    "\n",
    "\n",
    "print('Lambda ElasticNetCV :',elasticNetCV.alpha_) \n",
    "print('l1 Ratios: ',elasticNetCV.l1_ratio_)\n",
    "print('RMSE ElasticNetCV:', elasticNetCV_rmse)\n",
    "print('R2 Score ElasticNetCV: ',elasticNetCV_r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "2891e62b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.63872401e-01, -3.44261878e-02,  3.64611647e-02,  1.86044393e+03,\n",
       "        9.78369141e+01, -1.95839148e+03])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elasticNetCV.coef_.ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "ed983dfc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "51879.82647731908"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elasticNetCV.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "b994945c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Predictor</th>\n",
       "      <th>Coefficient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Administration</td>\n",
       "      <td>-0.034426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Marketing Spend</td>\n",
       "      <td>0.036461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>R&amp;D Spend</td>\n",
       "      <td>0.763872</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Predictor  Coefficient\n",
       "1   Administration    -0.034426\n",
       "2  Marketing Spend     0.036461\n",
       "0        R&D Spend     0.763872"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = pd.DataFrame(zip(X.columns, elasticNetCV.coef_)).sort_values(by=1)\n",
    "df2.columns = ['Predictor', 'Coefficient']\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ce151ef",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "f9295a7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RMSE</th>\n",
       "      <th>R2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Linear</th>\n",
       "      <td>8490.359121</td>\n",
       "      <td>0.948433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ridge</th>\n",
       "      <td>8170.933126</td>\n",
       "      <td>0.952240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lasso</th>\n",
       "      <td>8490.358662</td>\n",
       "      <td>0.948433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ElasticNet</th>\n",
       "      <td>8489.591439</td>\n",
       "      <td>0.948442</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   RMSE        R2\n",
       "Linear      8490.359121  0.948433\n",
       "Ridge       8170.933126  0.952240\n",
       "Lasso       8490.358662  0.948433\n",
       "ElasticNet  8489.591439  0.948442"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_vals = [linearRegression_rmse, ridgeCV_rmse, lassoCV_rmse, elasticNetCV_rmse]\n",
    "r2_vals = [linearRegression_r2, ridgeCV_r2, lassoCV_r2, elasticNetCV_r2]\n",
    "\n",
    "labels = ['Linear', 'Ridge', 'Lasso', 'ElasticNet']\n",
    "\n",
    "rmse_df = pd.Series(rmse_vals, index=labels).to_frame()\n",
    "rmse_df.rename(columns={0: 'RMSE'}, inplace=1)\n",
    "\n",
    "rmse_df['R2'] = pd.Series(r2_vals, index=labels).to_frame()\n",
    "rmse_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "de582142",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=(6,6))\n",
    "ax = plt.axes()\n",
    "\n",
    "labels = ['Ridge', 'Lasso', 'ElasticNet']\n",
    "\n",
    "models = [ridgeCV, lassoCV, elasticNetCV]\n",
    "\n",
    "for mod, lab in zip(models, labels):\n",
    "    ax.plot(y_test, mod.predict(X_test), \n",
    "             marker='o', ls='', ms=3.0, label=lab)\n",
    "\n",
    "\n",
    "leg = plt.legend(frameon=True)\n",
    "leg.get_frame().set_edgecolor('black')\n",
    "leg.get_frame().set_linewidth(1.0)\n",
    "\n",
    "ax.set(xlabel='Actual Profit', \n",
    "       ylabel='Predicted Profit', \n",
    "       title='Linear Regression Results');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "c0080d51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Predicted</th>\n",
       "      <th>Actual</th>\n",
       "      <th>Residual Error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>154662.552752</td>\n",
       "      <td>156122.51</td>\n",
       "      <td>1459.957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>76229.949954</td>\n",
       "      <td>78239.91</td>\n",
       "      <td>2009.960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>76250.069727</td>\n",
       "      <td>77798.83</td>\n",
       "      <td>1548.760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>59638.404271</td>\n",
       "      <td>49490.75</td>\n",
       "      <td>-10147.654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>144595.944456</td>\n",
       "      <td>129917.04</td>\n",
       "      <td>-14678.904</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Predicted     Actual  Residual Error\n",
       "0  154662.552752  156122.51        1459.957\n",
       "1   76229.949954   78239.91        2009.960\n",
       "2   76250.069727   77798.83        1548.760\n",
       "3   59638.404271   49490.75      -10147.654\n",
       "4  144595.944456  129917.04      -14678.904"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Predicted_profit  = ridgeCV.predict(X_train)\n",
    "residuals = y_train - Predicted_profit\n",
    "Act_pred = pd.DataFrame(data={\"Predicted\":Predicted_profit, \"Actual\":y_train, \"Residual Error\":round(residuals,3)})\n",
    "Act_pred.reset_index(drop=True, inplace=True)\n",
    "Act_pred.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "9eb54a95",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Asus\\anaconda3\\lib\\site-packages\\statsmodels\\graphics\\gofplots.py:993: UserWarning: marker is redundantly defined by the 'marker' keyword argument and the fmt string \"bo\" (-> marker='o'). The keyword argument will take precedence.\n",
      "  ax.plot(x, y, fmt, **plot_style)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#The Q-Q plot infers that the residuals meets condition of homoscedasticity\n",
    "import scipy.stats as stats\n",
    "import statsmodels.api as sm\n",
    "\n",
    "fig = sm.qqplot(residuals, stats.t, fit=True, line=\"45\")\n",
    "fig.suptitle(\"Error Terms\", fontsize = 20)    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "e6fd2647",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The errors should not follow any pattern and equally distributed y=0(i.e; mean=0.000)\n",
    "\n",
    "plt.scatter(y_train, residuals)\n",
    "plt.axhline(y=0.0, color='r', linestyle='-')\n",
    "plt.title(\"Residual Plot\", fontsize = 20)   \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "5370f2c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([3., 1., 0., 7., 5., 8., 3., 0., 5., 2.]),\n",
       " array([-14984.88933392, -12084.04080054,  -9183.19226716,  -6282.34373378,\n",
       "         -3381.49520039,   -480.64666701,   2420.20186637,   5321.05039975,\n",
       "          8221.89893313,  11122.74746652,  14023.5959999 ]),\n",
       " <BarContainer object of 10 artists>)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(residuals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "0e9bd5ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NormaltestResult(statistic=0.2294800736138197, pvalue=0.8915978964180701)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats.mstats import normaltest # D'Agostino K^2 Test\n",
    "normaltest(residuals.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3117bd79",
   "metadata": {},
   "source": [
    "# Trivia : Predict New Dummy Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "225584ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([190582.84684329])"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "row = [165000,137000,470000,0,0,0]\n",
    "# make a prediction\n",
    "yhat = ridgeCV.predict([row])\n",
    "yhat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ab0b064",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
